# import jwt
# import requests
# import json
# from cryptography.hazmat.primitives import serialization

# # Obtain the token (access or ID token) from your authentication flow
# my_token = {
#     'access_token': 'eyJ0eXAiOiJKV1QiLCJub25jZSI6InAwSC1PZjNvNlQzbklOQ0tzZGtvX2cxV2NJWnl2WUNBbC1VMUFuX3pRVWciLCJhbGciOiJSUzI1NiIsIng1dCI6IkwxS2ZLRklfam5YYndXYzIyeFp4dzFzVUhIMCIsImtpZCI6IkwxS2ZLRklfam5YYndXYzIyeFp4dzFzVUhIMCJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC83MmY5ODhiZi04NmYxLTQxYWYtOTFhYi0yZDdjZDAxMWRiNDcvIiwiaWF0IjoxNzE2NTYyMDgwLCJuYmYiOjE3MTY1NjIwODAsImV4cCI6MTcxNjU2NjY2NCwiYWNjdCI6MCwiYWNyIjoiMSIsImFjcnMiOlsidXJuOnVzZXI6cmVnaXN0ZXJzZWN1cml0eWluZm8iLCJjMiIsImMzIl0sImFpbyI6IkFlUUFHLzhXQUFBQUtoNEJSYk53K1dmWEMzTWpRU0lRejUySm82ODlnVExaUWFPdEwxUzlMNmZzVU1jNHU4Wjk3SUdwaklEM0pGaklqNDhOZllocDVxVHl2cEZKTnBYMnZmUzIwMC9mT3J1cHYzOHErbHk3cTErOTVIcmt5cE1pQXdEYnBWQ3duSG93UUlXZGVEVVFrcGlodFRKdWk4YlJoZXNpRlQ5UVN3NkxCZGEyNE1iNGswWDBCdFhsOFFVS3VITEtmaXR2VHhCTU90UkVxaGxjeXdIRnRrM2lEeXF2M0t6WnlEZ05OODFmZUIzekpBMC9GMHZidUFjeERoRTJ2Ulo4NlpxZ2FyMkhoZ3dMVlJKM1lGdmxJdmJRNDlVWG81ZlJIODVOT0xEN0dZV3FEcm40aXkwPSIsImFtciI6WyJyc2EiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoibXJjb21wbGlhbmNlY29waWxvdCIsImFwcGlkIjoiMTY2YzFkOGYtMWE4ZS00NDI2LWFiYmItOWFhMWRhOTYwMTNkIiwiYXBwaWRhY3IiOiIxIiwiY29udHJvbHMiOlsiYXBwX3JlcyJdLCJjb250cm9sc19hdWRzIjpbIjE2NmMxZDhmLTFhOGUtNDQyNi1hYmJiLTlhYTFkYTk2MDEzZCJdLCJkZXZpY2VpZCI6IjQwZWYzM2E3LTEzMzctNDdkNy1iZjc1LTZjMDlkMzIxYjE4NyIsImZhbWlseV9uYW1lIjoiU2FsbWFuIiwiZ2l2ZW5fbmFtZSI6Ikh1bXphIiwiaWR0eXAiOiJ1c2VyIiwiaXBhZGRyIjoiMjYwMDoxNzAwOjY3YjozODA4OmI1Zjg6YjNlZTpiYzEwOmE1NDUiLCJuYW1lIjoiSHVtemEgU2FsbWFuIChGSVJTVCBJTkZPUk1BVElPTiBURUNITk9MT0dZKSIsIm9pZCI6IjMzN2Q1NjI0LTNhM2UtNGI5Mi05OTZhLTA0NjRmM2Y4OGViOSIsIm9ucHJlbV9zaWQiOiJTLTEtNS0yMS0yMTI3NTIxMTg0LTE2MDQwMTI5MjAtMTg4NzkyNzUyNy03NjI3MTE3OCIsInBsYXRmIjoiMyIsInB1aWQiOiIxMDAzMjAwMzcwMEZFQkJCIiwicmgiOiIwLkFSb0F2NGo1Y3ZHR3IwR1JxeTE4MEJIYlJ3TUFBQUFBQUFBQXdBQUFBQUFBQUFBYUFQcy4iLCJzY3AiOiJlbWFpbCBvcGVuaWQgcHJvZmlsZSIsInNpZ25pbl9zdGF0ZSI6WyJkdmNfbW5nZCIsImR2Y19jbXAiLCJrbXNpIl0sInN1YiI6IkZnMVA5ZWs4ckFjcHZoNVdyMW9UOHFMNkVHRld4cDNIZlJFVjZ2X29la00iLCJ0ZW5hbnRfcmVnaW9uX3Njb3BlIjoiV1ciLCJ0aWQiOiI3MmY5ODhiZi04NmYxLTQxYWYtOTFhYi0yZDdjZDAxMWRiNDciLCJ1bmlxdWVfbmFtZSI6InYtaHNhbG1hbkBtaWNyb3NvZnQuY29tIiwidXBuIjoidi1oc2FsbWFuQG1pY3Jvc29mdC5jb20iLCJ1dGkiOiI5X2xmTW54ZzQwaVY0amhleWxvakFBIiwidmVyIjoiMS4wIiwid2lkcyI6WyJiNzlmYmY0ZC0zZWY5LTQ2ODktODE0My03NmIxOTRlODU1MDkiXSwieG1zX3N0Ijp7InN1YiI6Im1HQzRsM0w4QVRRbHFWZkxoOUNxZlY0YlE1eDY2SE9VSHp2TG9WLVUwZjgifSwieG1zX3RjZHQiOjEyODkyNDE1NDd9.Bni1MHVjWCwHzAi5G0l_DleeBpzn7nHvCBaYETqGGl5wEgjIusqn-XPQaFI_mfeijHp2JIYG1eFIGFBItPH5tj-1SgWuCJOA-feL_H7_VlhK9Ks07KK_kXTzDLKHZhKM8CruUMsZVvK5zHYLuvVa5KY-JX5SedIdzlx5zx97Zkv8KF_oHS7c4jQlR8B2Qs4peI0mFOj_fya4lwSIT2viZkN8uWbeh0ahf59bwI6DFVUa1xnI47Bk01W188SwdUKVZxB2F_mFXAQuFWXXVY3tgqOoyeftWcZEC8BmkNSkezgw4yPnGdCHhMjAJsEzfjkI2FC4fMItnu16mvlWKacRQA',
#     # Add other token properties as needed
# }

# # Fetch public keys from Azure AD discovery endpoint
# keys_url = 'https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47/discovery/v2.0/keys'
# response = requests.get(keys_url)
# keys_data = response.json()

# # Extract the key ID (kid) from the token header
# header = jwt.get_unverified_header(my_token['access_token'])
# kid = header.get('kid')

# # Find the corresponding public key based on the kid
# public_key = None
# for key in keys_data['keys']:
#     if key['kid'] == kid:
#         public_key = key
#         break

# if not public_key:
#     print("Public key not found for the given kid.")
#     exit()

# # Convert JWT key to RSA PEM format
# rsa_pem_key = jwt.algorithms.RSAAlgorithm.from_jwk(json.dumps(public_key))
# rsa_pem_key_bytes = rsa_pem_key.public_bytes(
#     encoding=serialization.Encoding.PEM,
#     format=serialization.PublicFormat.SubjectPublicKeyInfo
# )

# # Decode the token
# decoded_token = jwt.decode(
#     my_token['access_token'],
#     key=rsa_pem_key_bytes,
#     verify=True,
#     algorithms=[header['alg']],
#     audience='166c1d8f-1a8e-4426-abbb-9aa1da96013d',
#     issuer='https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47/v2.0'
# )

# print("Decoded Token:", decoded_token)

import jwt
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.backends import default_backend
from cryptography import x509
import base64

# Replace these with your actual tokens
access_token = 'eyJ0eXAiOiJKV1QiLCJub25jZSI6InAwSC1PZjNvNlQzbklOQ0tzZGtvX2cxV2NJWnl2WUNBbC1VMUFuX3pRVWciLCJhbGciOiJSUzI1NiIsIng1dCI6IkwxS2ZLRklfam5YYndXYzIyeFp4dzFzVUhIMCIsImtpZCI6IkwxS2ZLRklfam5YYndXYzIyeFp4dzFzVUhIMCJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC83MmY5ODhiZi04NmYxLTQxYWYtOTFhYi0yZDdjZDAxMWRiNDcvIiwiaWF0IjoxNzE2NTYyMDgwLCJuYmYiOjE3MTY1NjIwODAsImV4cCI6MTcxNjU2NjY2NCwiYWNjdCI6MCwiYWNyIjoiMSIsImFjcnMiOlsidXJuOnVzZXI6cmVnaXN0ZXJzZWN1cml0eWluZm8iLCJjMiIsImMzIl0sImFpbyI6IkFlUUFHLzhXQUFBQUtoNEJSYk53K1dmWEMzTWpRU0lRejUySm82ODlnVExaUWFPdEwxUzlMNmZzVU1jNHU4Wjk3SUdwaklEM0pGaklqNDhOZllocDVxVHl2cEZKTnBYMnZmUzIwMC9mT3J1cHYzOHErbHk3cTErOTVIcmt5cE1pQXdEYnBWQ3duSG93UUlXZGVEVVFrcGlodFRKdWk4YlJoZXNpRlQ5UVN3NkxCZGEyNE1iNGswWDBCdFhsOFFVS3VITEtmaXR2VHhCTU90UkVxaGxjeXdIRnRrM2lEeXF2M0t6WnlEZ05OODFmZUIzekpBMC9GMHZidUFjeERoRTJ2Ulo4NlpxZ2FyMkhoZ3dMVlJKM1lGdmxJdmJRNDlVWG81ZlJIODVOT0xEN0dZV3FEcm40aXkwPSIsImFtciI6WyJyc2EiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoibXJjb21wbGlhbmNlY29waWxvdCIsImFwcGlkIjoiMTY2YzFkOGYtMWE4ZS00NDI2LWFiYmItOWFhMWRhOTYwMTNkIiwiYXBwaWRhY3IiOiIxIiwiY29udHJvbHMiOlsiYXBwX3JlcyJdLCJjb250cm9sc19hdWRzIjpbIjE2NmMxZDhmLTFhOGUtNDQyNi1hYmJiLTlhYTFkYTk2MDEzZCJdLCJkZXZpY2VpZCI6IjQwZWYzM2E3LTEzMzctNDdkNy1iZjc1LTZjMDlkMzIxYjE4NyIsImZhbWlseV9uYW1lIjoiU2FsbWFuIiwiZ2l2ZW5fbmFtZSI6Ikh1bXphIiwiaWR0eXAiOiJ1c2VyIiwiaXBhZGRyIjoiMjYwMDoxNzAwOjY3YjozODA4OmI1Zjg6YjNlZTpiYzEwOmE1NDUiLCJuYW1lIjoiSHVtemEgU2FsbWFuIChGSVJTVCBJTkZPUk1BVElPTiBURUNITk9MT0dZKSIsIm9pZCI6IjMzN2Q1NjI0LTNhM2UtNGI5Mi05OTZhLTA0NjRmM2Y4OGViOSIsIm9ucHJlbV9zaWQiOiJTLTEtNS0yMS0yMTI3NTIxMTg0LTE2MDQwMTI5MjAtMTg4NzkyNzUyNy03NjI3MTE3OCIsInBsYXRmIjoiMyIsInB1aWQiOiIxMDAzMjAwMzcwMEZFQkJCIiwicmgiOiIwLkFSb0F2NGo1Y3ZHR3IwR1JxeTE4MEJIYlJ3TUFBQUFBQUFBQXdBQUFBQUFBQUFBYUFQcy4iLCJzY3AiOiJlbWFpbCBvcGVuaWQgcHJvZmlsZSIsInNpZ25pbl9zdGF0ZSI6WyJkdmNfbW5nZCIsImR2Y19jbXAiLCJrbXNpIl0sInN1YiI6IkZnMVA5ZWs4ckFjcHZoNVdyMW9UOHFMNkVHRld4cDNIZlJFVjZ2X29la00iLCJ0ZW5hbnRfcmVnaW9uX3Njb3BlIjoiV1ciLCJ0aWQiOiI3MmY5ODhiZi04NmYxLTQxYWYtOTFhYi0yZDdjZDAxMWRiNDciLCJ1bmlxdWVfbmFtZSI6InYtaHNhbG1hbkBtaWNyb3NvZnQuY29tIiwidXBuIjoidi1oc2FsbWFuQG1pY3Jvc29mdC5jb20iLCJ1dGkiOiI5X2xmTW54ZzQwaVY0amhleWxvakFBIiwidmVyIjoiMS4wIiwid2lkcyI6WyJiNzlmYmY0ZC0zZWY5LTQ2ODktODE0My03NmIxOTRlODU1MDkiXSwieG1zX3N0Ijp7InN1YiI6Im1HQzRsM0w4QVRRbHFWZkxoOUNxZlY0YlE1eDY2SE9VSHp2TG9WLVUwZjgifSwieG1zX3RjZHQiOjEyODkyNDE1NDd9.Bni1MHVjWCwHzAi5G0l_DleeBpzn7nHvCBaYETqGGl5wEgjIusqn-XPQaFI_mfeijHp2JIYG1eFIGFBItPH5tj-1SgWuCJOA-feL_H7_VlhK9Ks07KK_kXTzDLKHZhKM8CruUMsZVvK5zHYLuvVa5KY-JX5SedIdzlx5zx97Zkv8KF_oHS7c4jQlR8B2Qs4peI0mFOj_fya4lwSIT2viZkN8uWbeh0ahf59bwI6DFVUa1xnI47Bk01W188SwdUKVZxB2F_mFXAQuFWXXVY3tgqOoyeftWcZEC8BmkNSkezgw4yPnGdCHhMjAJsEzfjkI2FC4fMItnu16mvlWKacRQA'
id_token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IkwxS2ZLRklfam5YYndXYzIyeFp4dzFzVUhIMCJ9.eyJhdWQiOiIxNjZjMWQ4Zi0xYThlLTQ0MjYtYWJiYi05YWExZGE5NjAxM2QiLCJpc3MiOiJodHRwczovL2xvZ2luLm1pY3Jvc29mdG9ubGluZS5jb20vNzJmOTg4YmYtODZmMS00MWFmLTkxYWItMmQ3Y2QwMTFkYjQ3L3YyLjAiLCJpYXQiOjE3MTY1NjIwODAsIm5iZiI6MTcxNjU2MjA4MCwiZXhwIjoxNzE2NTY1OTgwLCJhaW8iOiJBUlFCNi80V0FBQUF5NGNjclV6cGVSU2RFN3hkZUh6QlQ2QzJycFRWcWdrWUlvTFAxODlCbHc5N2xDUDU4Z3dNZHhBaEFaaS9XSXdDbUtVMXVKTm9KYVFXTkR4aTJ6VWdDaXNDZGM3VHdOeThsR0duUDZVN3JlYWIyK1Vhb2xId2wraVZlSlh0UVQ2aGhPOGJrM0JaaEFhV3pybm5EckNGSzhXclNHM25mdlNXdHFFbGVXU0R2VUJBTHZHdVJYbHJ0Z2dqeWZoaGFhdGZ2S3JHdCtqZCtSNUYvTTVwSTV6aldRUnBpazcyTGd3aThCbmVnMkZZOEt4OW9EMjhLYllYTTVIM1dQTncva1lpS3JEOXdyaEdUWUx2dlRlbGRzKytoSmI2bEwveXBrbDVRTFZTNVIvZHBjYWl3MVM0Tk9OeU9RQmdod2pUQzVjTWxRM3ZSdVNSV0JKRlh1Q1J5SVlkTWFwcGVYSCt2K2J5N0dkSFVyQVIyYm89IiwiZW1haWwiOiJ2LWhzYWxtYW5AbWljcm9zb2Z0LmNvbSIsIm5hbWUiOiJIdW16YSBTYWxtYW4gKEZJUlNUIElORk9STUFUSU9OIFRFQ0hOT0xPR1kpIiwibm9uY2UiOiJhMGIyNjM5Zjk1MmE0NDA1YTRlZjY4OGU3NGJhZDc1Ml8yMDI0MDUyNDE0NTc1OCIsIm9pZCI6IjMzN2Q1NjI0LTNhM2UtNGI5Mi05OTZhLTA0NjRmM2Y4OGViOSIsInByZWZlcnJlZF91c2VybmFtZSI6InYtaHNhbG1hbkBtaWNyb3NvZnQuY29tIiwicmgiOiIwLkFSb0F2NGo1Y3ZHR3IwR1JxeTE4MEJIYlI0OGRiQmFPR2laRXE3dWFvZHFXQVQwYUFQcy4iLCJyb2xlcyI6WyJSZWFkIl0sInN1YiI6Im1HQzRsM0w4QVRRbHFWZkxoOUNxZlY0YlE1eDY2SE9VSHp2TG9WLVUwZjgiLCJ0aWQiOiI3MmY5ODhiZi04NmYxLTQxYWYtOTFhYi0yZDdjZDAxMWRiNDciLCJ1dGkiOiI5X2xmTW54ZzQwaVY0amhleWxvakFBIiwidmVyIjoiMi4wIn0.AgWsHvvxDZpL5tDx6xIo_WkmqskFaW6woHKW874SEta2VWSnub_SVBO8w2ij3m3tVFHykjrZ_W17YECpxtJ89cBv8iae__pagUjBqTv7bYa_ng9eHTEtLSQH986g53eVVxBCVrrW7gQknm83jUxOBsocCy2vm7hGRcJXYKoHsKifjRzD8Q10RBAz4C0AwNuKOdoXJ2P_PpVMdnh8ED06ETKbubSLFtUjXmPNQZF6xV-qh_Q_OS8mNXoLOhkSaiDwXBan6qrTCF_ML_2FmWkMSBPWlp9SwG0XH4L1yFjsqIjvEwhvSH1R1C41A0vK1fJgIbaFxSfEh-WiZfjZzYmkJw'

x5c = 'MIIC/TCCAeWgAwIBAgIIOdwuMdHVGkEwDQYJKoZIhvcNAQELBQAwLTErMCkGA1UEAxMiYWNjb3VudHMuYWNjZXNzY29udHJvbC53aW5kb3dzLm5ldDAeFw0yNDA0MTExNjA0MjZaFw0yOTA0MTExNjA0MjZaMC0xKzApBgNVBAMTImFjY291bnRzLmFjY2Vzc2NvbnRyb2wud2luZG93cy5uZXQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCiPM4ug8BrwPKQlafR3P28H+U9OTC0LLDWhHxYWmzOgFob6EqYGFgsK7LI5YigiCbERMjn5u6VDOwJNHv1ZbGrqw3Fc9OUHLiLWKGPCGcPsKuBG7RT87wY/Mww+VBdiz8L623Q5089gRi/9nNs2SAxM1pHlZZ753cvicMxatI/vRLP7z+RyYDWppqn8xP831rlCJ0PbRt8691e203G7r9rMBU3lRh4F6+tNokc7YdFWJzD/MrAlJlXbqOWOmyYYyI1S7ZqcBFLYLgoz8cIh9ftzAT0Dz2knVSHnxsEv3xvU0PMaS3SFUIFOKU9qSFHhEc/RT128cWjelQl3VCuX0BBAgMBAAGjITAfMB0GA1UdDgQWBBTXp9LEVP2CZiM0hEP5t18l/sDAfzANBgkqhkiG9w0BAQsFAAOCAQEAH5vIhhDC8d+31sm9Lo5Ohlsabmv7eA3JgXKw7x4VDFoQxrZHMw0qsQOk9bTrwJHa09o0CQkO8VZG5zJ0ZpXplRtrN8FaKCLb1qstF2P6wuZIZR1EJTJb4L5VvhaSUiFWkBfQPBDMVJd9g2CEOhW+1jIKEea0wt3AC2zUvNybhbSzDMyPNSwu0EiZLJsUMdbOxdGmCZjvIWMaddDu9GVT+KtPWYDDKs2POZoYPDGCp6ftd2+L+ma2gZCL3HvFBWjCIctsu20aHP8retkEOiVzMVbt68gDyT61VTlhBM/pxlcHMO6wfA1nQzY2qDwMCEOocmsYt3mrITolYxxyBjSVnA=='

cert_der = base64.b64decode(x5c)
cert = x509.load_der_x509_certificate(cert_der, default_backend())

# Extract the public key from the certificate
public_key = cert.public_key()

pem = public_key.public_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PublicFormat.SubjectPublicKeyInfo
)

# Decode the tokens without verification
# access_token_decoded = jwt.decode(access_token, options={"verify_signature": False})
access_token_decoded = jwt.decode(id_token, key=public_key, algorithms=["RS256"])
# id_token_decoded = jwt.decode(id_token, options={"verify_signature": False})

# Print the decoded tokens
print("Access Token:")
print(access_token_decoded)
print('\n----------------------------------------------------------------------------------\n')
print("\nID Token:")
# print(id_token_decoded)
